#!/bin/sh

#―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――#
#             Safe text files editing as root (sudoedit enhanced)             #
#                         Portable POSIX shell script                         #
#                    Copyright: 2020-2020 Vlastimil Burian                    #
#                       E-mail: info@vlastimilburian.cz                       #
#                              License: GPL v3.0                              #
#                                Revision: 1.1                                #
#                        GitHub: https://git.io/Jvnzq                         #
#―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――#

# BEFORE USE

# Please, customize these lists to your preference before using this script!
sudoedit__cli_editor_list='nano vi vim'
sudoedit__gui_editor_list='gedit emacs xed subl code'

# Short list of editors I use or have used in the past, including only these.
# Descriptions are my own words based on my past or current experiences only.
#------------------------------------------------------------------------------
# Command-line:
# NANO  - free, minimalistic, suitable for new users or those not having time to learn vim (https://www.nano-editor.org/)
# VI(M) - free, very complex to learn and operate, suitable for hard-core users (https://www.vim.org/)
# Graphical:
# GEDIT - free, simple and easy to use, but relatively powerful general purpose editor (https://wiki.gnome.org/Apps/Gedit)
# EMACS - free, extensible, customizable, suitable for experienced users (https://www.gnu.org/software/emacs/)
# XED   - free, small and lightweight text editor, Linux Mint specific originally (https://github.com/linuxmint/xed)
# SUBL  - paid, $80 to date, with unlimited trial though, faster compared to Code (https://www.sublimetext.com/)
# CODE  - free, heavy, slow on old computers, but extremely powerful, my personal favorite (https://code.visualstudio.com/)

# USAGE INSTRUCTIONS

# 1. Customize the editor lists in the beginning of this script.
#
# 2. Bash: Source this script in your ~/.bashrc or ~/.bash_aliases with:
# . /full/path/to/sudoedit-enhanced
# Other shells: Generally put it inside your shell's startup config file...
#
# 3. Call an alias, for instance, one CLI, and one GUI editor:
# sunano /path/to/file
# susubl /path/to/file
#
# Explanation: This script works with standard sudoedit, but
# it does way more checks and allows GUI editors to be used.
# It needs to be sourced into your shell's environment first.
# Then simply use the pre-defined aliases or define some yourself.

sudoedit_err ()
{
    printf 'sudoedit_run(): %b\n' "$@" >&2
}

sudoedit_run ()
{
    # sudoedit is part of sudo`s edit feature
    if ! command -v sudo > /dev/null 2>&1; then
        sudoedit_err "'sudo' is required by this script."
        return 1
    fi
    # primary non-empty arguments check
    if ! { [ $# -ge 3 ] && [ -n "$1" ] && [ -n "$2" ] && [ -n "$3" ]; } then
        sudoedit_err "Low number of arguments.\\nExpected: \$1 = editor type; \$2 = editor name; \$3, (\$4), ... = file(s).\\nPassed $#: $*"
        return 1
    fi
    # editor arguments processing
    case "$1" in
        (cli) wait_option=''   ;;
        (gui) wait_option='-w' ;;
        ( * ) sudoedit_err 'Unrecognized editor type.'; return 1 ;;
    esac
    editor_name=$2
    editor_path=$(command -v "$editor_name" 2> /dev/null)
    shift 2
    # check if such editor is installed on the system
    if ! [ -x "$editor_path" ]; then
        sudoedit_err "This editor ('$editor_name') is not installed on this system."
        return 1
    fi
    # 1. check if all the files exist, it does not make sense to create a new file this way
    # 2. sudoedit does not work with symlinks, so translate symlinks to normal file paths
    for file in "$@"; do
        if ! [ -f "$file" ]; then
            sudoedit_err "This file ('$file') does not exist or it is not a regular file."
            return 1
        fi
        if [ -L "$file" ]; then
            if ! file=$(readlink -f "$file"); then
                sudoedit_err "readlink -f $file failed."
                return 1
            fi
        fi
        set -- "$@" "$file"
        shift
    done
    # main command
    if [ "$editor_name" = code ]; then
        code_data_dir=/root/.config/Code
        # Code-specific; NOT using `sudoedit`
        # it is not possible to use sudoedit in conjunction with Code
        # yet it is possible to specify --user-data-dir option for it
        sudo mkdir -p "$code_data_dir" &&
        sudo "$editor_path" "$wait_option" --user-data-dir="$code_data_dir" "$@"
    else
        # generic; using `sudoedit`
        # run the editor with one-time SUDO_EDITOR set-up
        SUDO_EDITOR="$editor_path $wait_option" sudoedit "$@"
    fi
}

# Editor aliases generators:
# - there can be an unlimited amount of editors in the the cli / gui list
# - we avoid generating editors aliases for which editor is not installed
for cli_editor in $sudoedit__cli_editor_list; do
    if command -v "$cli_editor" > /dev/null 2>&1; then
        # shellcheck disable=SC2139
        # shellcheck disable=SC2086
        alias su$cli_editor="sudoedit_run cli $cli_editor"
    fi
done
for gui_editor in $sudoedit__gui_editor_list; do
    if command -v "$gui_editor" > /dev/null 2>&1; then
        # shellcheck disable=SC2139
        # shellcheck disable=SC2086
        alias su$gui_editor="sudoedit_run gui $gui_editor"
    fi
done
