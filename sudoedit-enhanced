#!/bin/sh

#+------------------------------------------------------------------------------+
#|                      Safe system files editing as root                       |
#|                         Language: POSIX shell script                         |
#|                    Copyright: 2020-2022 Vlastimil Burian                     |
#|                        Email: info@vlastimilburian.cz                        |
#|                              License: Unlicense                              |
#|                         GitHub: https://git.io/Jvnzq                         |
#|                              Version: 4.0-beta2                              |
#|                            Released: 2022-Feb-26                             |
#+------------------------------------------------------------------------------+

# Customize these editor lists to your preference
# before sourcing this script to your shell environment.
conf__cli_editors='vi nano'
conf__gui_editors='subl xed'

# We avoid generating editor aliases for which an editor is not installed.
# We avoid generating editor aliases for which we already have an alias.

# CLI alias generator:
for cli_editor in $conf__cli_editors; do
    if command -v "$cli_editor" >/dev/null 2>&1; then
        if [ -z "$(alias "su$cli_editor" 2>/dev/null)" ]; then
            # shellcheck disable=SC2139,SC2086
            alias su$cli_editor="sudoedit_run cli $cli_editor"
        fi
    fi
done

# GUI alias generator:
for gui_editor in $conf__gui_editors; do
    if command -v "$gui_editor" >/dev/null 2>&1; then
        if [ -z "$(alias "su$gui_editor" 2>/dev/null)" ]; then
            # shellcheck disable=SC2139,SC2086
            alias su$gui_editor="sudoedit_run gui $gui_editor"
        fi
    fi
done

# NON-COMPLIANT-GUI EXAMPLES:
# * code -w --user-data-dir; I did not find a way to run it through sudoedit
# * atom -w --no-sandbox
# * gedit -w does not work via rooted ssh
# * pluma does not have -w switch
#
# Description: This script works with standard sudoedit, but
# it does a bit more checks and allows some GUI editors to be used.
# It also allows symbolic links be translated into ordinary files.
# It needs to be sourced into your shell's environment first.
# Then simply use the pre-defined aliases or define some yourself.
#
# USAGE INSTRUCTIONS
#
# 1. Customize the editor lists at the beginning of this script.
#
# 2. Bash: Source this script in your ~/.bashrc or ~/.bash_aliases with:
#    source /full/path/to/sudoedit-enhanced
#
# Other shells: Load it into your shell universally using the dot:
#    . /full/path/to/sudoedit-enhanced
#
# 3. Call an alias, for instance, one CLI, and one GUI editor:
#
# sunano /path/to/file
# susubl /path/to/file

sudoedit_run ()
{
    # Print usage if called with 2 arguments.
    if [ "$#" -le 2 ]; then
        printf '%s\n\n' 'Usage example: sueditor /path/to/file1 /path/to/file2'
        printf '%s\n' 'sudoedit-enhanced defined the following editors:'
        for editor in $conf__cli_editors $conf__gui_editors; do
            if command -v "$editor" >/dev/null 2>&1; then
                if [ -n "$(alias "su$editor" 2>/dev/null)" ]; then
                    printf '%s  ' "su$editor"
                fi
            fi
        done
        printf '\n'
        return 0
    fi

    # sudo must be installed.
    if ! command -v sudo >/dev/null 2>&1; then
        printf >&2 '%s\n' "'sudo' is required by this function. This is because" \
                          "'sudoedit' is part of 'sudo'\`s edit feature (sudo -e)."
        return 1
    fi

    # The first argument must be an editor type.
    case "$1" in
        (cli|gui)
        ;;
        (*) printf >&2 '%s\n' "'$1' is unrecognized editor type, expected 'cli' or 'gui'."
            return 1
        ;;
    esac

    # Store editor type and name and move these two out of argument array.
    editor_type=$1
    editor_name=$2
    shift 2

    # Find and store path to this editor.
    editor_path=$(command -v "$editor_name" 2>/dev/null)

    # Check if such editor, ie. executable path exists.
    if [ ! -x "$editor_path" ]; then
        printf >&2 '%s\n' "The '$editor_name' editor is not properly installed on this system."
        return 1
    fi

    # sudoedit does not work with symlinks;
    # Translating symlinks to normal file paths using readlink - if available.
    if command -v readlink >/dev/null 2>&1; then
        for file in "$@"; do
            if [ -L "$file" ]; then
                if ! file=$(readlink -f "$file"); then
                    printf >&2 '%s\n' "readlink -f $file failed."
                    return 1
                fi
            fi
            set -- "$@" "$file"
            shift
        done
    fi

    # - GUI editors sit on the terminal until closed thanks to the wait option which we require.
    #   For example xed and others flood the terminal with errors, so we redirect all output,
    #   into prepared temporary file in order to filter possible "sudoedit: file unchanged" lines.
    # - CLI editors work as expected without any customizations needed.
    if [ "$editor_type" = gui ]; then

        # GUI step 1) We try to determine the location of a temporary directory.
        tmpdir=${TMPDIR:-/tmp}
        if [ ! -d "$tmpdir" ]; then
            # shellcheck disable=SC2016
            printf >&2 '%s\n' '${TMPDIR:-/tmp} failed to get a temporary directory.'
            return 1
        fi

        # GUI step 2) We try to create a temporary file inside the temporary directory.
        tmpfile=$(mktemp "$tmpdir/sudoedit_run_gui.XXXXXX")
        if [ ! -f "$tmpfile" ]; then
            printf >&2 '%s\n' "mktemp $tmpdir/sudoedit_run_gui.XXXXXX failed to get a temporary file."
            return 1
        fi

        # GUI step 3) We try to launch the above identified editor through sudoedit.
        # * We require the wait switch for the editor to have it.
        # * We redirect all output to the temporary file we created.
        # * We store sudoedit's return code into a variable as we need it later on.
        SUDO_EDITOR="$editor_path -w" sudoedit -- "$@" >"$tmpfile" 2>&1
        sudoedit_return_code=$?

        # When using grep, it is important to escape it for there is usually some alias.
        # shellcheck disable=SC1007
        GREP_COLORS= GREP_COLOR= GREP_OPTIONS= \grep sudoedit "$tmpfile"
        rm "$tmpfile"

        # It is imperative to return with sudoedit's return code, and not rm's or something else.
        return "$sudoedit_return_code"
    else
        # CLI editors do not cause problems mentioned above.
        # This is a generic and proper way using sudoedit;
        # Running the editor with one-time SUDO_EDITOR setup.
        SUDO_EDITOR="$editor_path" sudoedit -- "$@"
    fi
}
